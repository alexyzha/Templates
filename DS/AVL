#include <bits/stdc++.h>
using namespace std;

// no deletion for this yet, just an improvement over gnu pbds rb tree

struct Node {
    int key;
    int size; 
    Node* left;
    Node* right;
    Node(int k) : key(k), size(1), left(nullptr), right(nullptr) {}
};

class AVL {
private:
    Node* root;

    void usz(Node* node) { if(node) node->size = nsz(node->left) + nsz(node->right) + 1; } //update size

    Node* left(Node* x) {
        Node* y = x->right;
        x->right = y->left;
        y->left = x;
        usz(x);
        usz(y);
        return y;
    }

    Node* right(Node* y) {
        Node* x = y->left;
        y->left = x->right;
        x->right = y;
        usz(y);
        usz(x);
        return x;
    }
    
    Node* insert(Node* node, int key) {
        if(!node) return new Node(key);
        if(key < node->key) node->left = insert(node->left, key);
        else node->right = insert(node->right, key);
        usz(node);
        int balance = nsz(node->left) - nsz(node->right);
        if(balance > 1) return right(node);
        else if(balance < -1) return left(node);
        return node;
    }
    
    int gct(Node* node, int key) {
        if(!node) return 0;
        if(key < node->key) return nsz(node->right) + 1 + gct(node->left, key);
        else return gct(node->right, key);
    }   
    
    int nsz(Node* node) { return(node?node->size:0); }

public:
    AVL() : root(nullptr) {}
    void insert(int key) { root = insert(root, key); }
    int gct(int key) { return gct(root, key); }    
    int nsz() { return nsz(root); }
};


// TEMPLATE VER


template<typename T>
struct Node {
    T key;
    T size; 
    Node* left;
    Node* right;
    Node(T k) : key(k), size(1), left(nullptr), right(nullptr) {}
};

template<typename T>
class AVL {
private:
    Node<T>* root;

    void usz(Node<T>* node) { if(node) node->size = nsz(node->left) + nsz(node->right) + 1; } //update size

    Node<T>* left(Node<T>* x) {
        Node<T>* y = x->right;
        x->right = y->left;
        y->left = x;
        usz(x);
        usz(y);
        return y;
    }

    Node<T>* right(Node<T>* y) {
        Node<T>* x = y->left;
        y->left = x->right;
        x->right = y;
        usz(y);
        usz(x);
        return x;
    }
    
    Node<T>* insert(Node<T>* node, T key) {
        if(!node) return new Node(key);
        if(key < node->key) node->left = insert(node->left, key);
        else node->right = insert(node->right, key);
        usz(node);
        int balance = nsz(node->left) - nsz(node->right);
        if(balance > 1) return right(node);
        else if(balance < -1) return left(node);
        return node;
    }
    
    int gct(Node<T>* node, T key) {
        if(!node) return 0;
        if(key < node->key) return nsz(node->right) + 1 + gct(node->left, key);
        else return gct(node->right, key);
    }   
    
    int nsz(Node<T>* node) { return(node?node->size:0); }

public:
    AVL() : root(nullptr) {}
    void insert(T key) { root = insert(root, key); }
    int gct(T key) { return gct(root, key); }    
    int nsz() { return nsz(root); }
};